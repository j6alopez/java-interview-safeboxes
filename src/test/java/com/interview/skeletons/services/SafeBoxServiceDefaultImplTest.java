package com.interview.skeletons.services;

import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.map.IMap;
import com.interview.skeletons.dtos.items.ItemDTO;
import com.interview.skeletons.dtos.safes.CreateSafeBoxDTO;
import com.interview.skeletons.dtos.safes.SafeBoxDTO;
import com.interview.skeletons.dtos.safes.UpdateSafeBoxDTO;
import com.interview.skeletons.exceptions.SafeBoxException;
import com.interview.skeletons.exceptions.enums.SafeBoxErrorMessage;
import com.interview.skeletons.mappers.SafeBoxMapper;
import com.interview.skeletons.models.Item;
import com.interview.skeletons.models.SafeBox;
import com.interview.skeletons.repositories.SafeBoxRepository;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.RandomUtils;
import org.jeasy.random.EasyRandom;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class SafeBoxServiceDefaultImplTest {
    @Mock
    private SafeBoxRepository safeBoxRepository;
    @Mock
    private HazelcastInstance hazelcastInstance;
    @Mock
    private IMap<Object, Object> mockMap;
    @InjectMocks
    private SafeBoxServiceDefaultImpl safeBoxServiceDefault;
    private EasyRandom easyRandomGenerator;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        easyRandomGenerator = new EasyRandom();
        when(hazelcastInstance.getMap(anyString())).thenReturn(mockMap);
    }

    @Test
    void get_safe_box_content_ok() {
        final SafeBox testSafeBox = getRandomTestSafeBox();
        final Long safeBoxId = testSafeBox.getId();

        final List<ItemDTO> expectedItemsDTO = SafeBoxMapper.toItemsDto(testSafeBox.getItems());

        when(safeBoxRepository.findById(safeBoxId)).thenReturn(Optional.of(testSafeBox));

        final SafeBoxDTO result = safeBoxServiceDefault.getSafeBox(safeBoxId);

        verify(safeBoxRepository).findById(safeBoxId);
        assertEquals(result.id(), testSafeBox.getId());
        assertTrue(result.items().containsAll(expectedItemsDTO));
    }

    @Test
    void get_safe_box_not_found_ko() {
        final Long safeBoxId = RandomUtils.nextLong(1, 100);

        when(safeBoxRepository.findById(safeBoxId)).thenReturn(Optional.empty());

        final SafeBoxException exception = assertThrows(SafeBoxException.class, () -> {
            safeBoxServiceDefault.getSafeBox(safeBoxId);
        });
        verify(safeBoxRepository).findById(any());
        assertEquals(SafeBoxErrorMessage.SAFE_BOX_NOT_FOUND, exception.getErrorMessage());

    }

    @Test
    void create_safe_box_ok() {
        final CreateSafeBoxDTO createSafeBoxRequest = new CreateSafeBoxDTO(
            RandomStringUtils.randomAlphabetic(5),
            RandomStringUtils.randomAlphanumeric(12, 20) + "1!"
        );
        final SafeBox expectedSafeBox = new SafeBox(createSafeBoxRequest.name(), createSafeBoxRequest.password());
        final Long randomAutoGeneratedId = RandomUtils.nextLong(1, 1000);
        expectedSafeBox.setId(randomAutoGeneratedId);

        when(safeBoxRepository.save(any())).thenReturn(expectedSafeBox);

        safeBoxServiceDefault.createSafeBox(createSafeBoxRequest);

        final ArgumentCaptor<SafeBox> createSafeBox = ArgumentCaptor.forClass(SafeBox.class);
        verify(safeBoxRepository).save(createSafeBox.capture());

        final SafeBox passedSafeBox = createSafeBox.getValue();
        assertEquals(passedSafeBox.getName(), expectedSafeBox.getName());
        assertEquals(passedSafeBox.getPassword(), expectedSafeBox.getPassword());
        assertNull(passedSafeBox.getItems());
    }

    @Test
    void update_safe_box_ok() {
        final List<String> descriptions = easyRandomGenerator.objects(String.class, 3).toList();
        final List<ItemDTO> itemsDTO = descriptions.stream()
            .map(ItemDTO::new)
            .toList();

        final UpdateSafeBoxDTO request = new UpdateSafeBoxDTO(itemsDTO);
        final SafeBox persistedSafeBox = getRandomTestSafeBox();
        final Long safeBoxId = persistedSafeBox.getId();
        final List<Item> itemsToBeAdded = SafeBoxMapper.fromItemsDTO(request.items());

        when(safeBoxRepository.findById(safeBoxId)).thenReturn(Optional.of(persistedSafeBox));

        safeBoxServiceDefault.updateSafeBox(safeBoxId, request);

        final ArgumentCaptor<SafeBox> updateSafeBox = ArgumentCaptor.forClass(SafeBox.class);
        verify(safeBoxRepository).save(updateSafeBox.capture());

        final SafeBox updatedSafeBox = updateSafeBox.getValue();
        assertEquals(updatedSafeBox.getId(), safeBoxId);
        assertTrue(updatedSafeBox.getItems().containsAll(itemsToBeAdded));
    }

    @Test
    void update_safe_box_not_found_ko() {
        final Long safeBoxId = RandomUtils.nextLong(1, 100);
        final List<String> descriptions = easyRandomGenerator.objects(String.class, 3).toList();
        final List<ItemDTO> itemsDTO = descriptions.stream()
            .map(ItemDTO::new)
            .toList();
        final UpdateSafeBoxDTO updateRequest = new UpdateSafeBoxDTO(itemsDTO);

        when(safeBoxRepository.findById(safeBoxId)).thenReturn(Optional.empty());

        final SafeBoxException exception = assertThrows(SafeBoxException.class, () -> {
            safeBoxServiceDefault.updateSafeBox(safeBoxId, updateRequest);
        });
        verify(safeBoxRepository).findById(any());
        verify(safeBoxRepository, never()).save(any());
        assertEquals(SafeBoxErrorMessage.SAFE_BOX_NOT_FOUND, exception.getErrorMessage());
    }

    private SafeBox getRandomTestSafeBox() {
        return easyRandomGenerator.nextObject(SafeBox.class);
    }

}
